# The various escape codes that we can use to colour our prompt.
        RED="\[\033[0;31m\]"
     YELLOW="\[\033[1;33m\]"
      GREEN="\[\033[0;32m\]"
       BLUE="\[\033[1;34m\]"
  LIGHT_RED="\[\033[1;31m\]"
LIGHT_GREEN="\[\033[1;32m\]"
      WHITE="\[\033[1;37m\]"
 LIGHT_GRAY="\[\033[0;37m\]"
COLOUR_NONE="\[\e[0m\]"

# Detect whether the current directory is a git repository.
function is_git_repository {
  git rev-parse --is-inside-work-tree &> /dev/null
}

# Only show 3 directories, not the whole path
function set_pwd_depth_limit_3 {
  if [ "$PWD" = "$HOME" ]; then
    PROMPT_DIR="~"
  else
    PROMPT_DIR=`pwd | sed -e "s|.*/\(.*/.*/.*\)|\1|"`
  fi
}

# Determine the branch/state information for this git repository.
function set_git_branch {
  # Capture the output of the "git status" command.
  git_status="$(git status 2> /dev/null)"

  # Set colour based on clean/staged/dirty.
  if [[ ${git_status} =~ "working directory clean" ]]; then
    state="${GREEN}-"
  else
    state="${LIGHT_RED}+"
  fi

  # Get the name of the branch.
  branch_pattern="^On branch ([^${IFS}]*)"
  if [[ ${git_status} =~ ${branch_pattern} ]]; then
    branch=${BASH_REMATCH[1]}
  fi

  # Set the final branch string.
  BRANCH="${state} ${YELLOW}${branch}${COLOUR_NONE} "
}

function set_success_colour () {
  if test $1 -eq 0 ; then
    SUCCESS_COLOUR=${GREEN}
  else
    SUCCESS_COLOUR=${LIGHT_RED}
  fi
}

# Determine active Python virtualenv details.
function set_virtualenv () {
  if test -z "$VIRTUAL_ENV" ; then
      PYTHON_VIRTUALENV=""
  else
      PYTHON_VIRTUALENV="${BLUE}[`basename \"$VIRTUAL_ENV\"`]${COLOUR_NONE} "
  fi
}

# Set the full bash prompt.
function set_bash_prompt () {
  # Set the PROMPT_SYMBOL colour. We do this first so we don't lose the
  # return value of the last command.
  set_success_colour $?

  # Set the prompt directory
  set_pwd_depth_limit_3

  # Set the PYTHON_VIRTUALENV variable.
  set_virtualenv

  # Set the BRANCH variable.
  if is_git_repository ; then
    set_git_branch
  else
    BRANCH=''
  fi

  # Set the bash prompt variable.
  PS1="${PYTHON_VIRTUALENV}${SUCCESS_COLOUR}< ${YELLOW}${PROMPT_DIR} ${BRANCH}${SUCCESS_COLOUR}>${COLOUR_NONE} "
}

# Tell bash to execute this function just before displaying its prompt.
PROMPT_COMMAND=set_bash_prompt

